#!/usr/bin/env bash
# init
cores=12
jobname="PRV"
time="02:00:00"
mem="20Gb"
constraint="medmem"

function usage () {
echo "Usage: providentia [-u|--usage] [-c|--cores NUM_CORES (default=16)]"
echo "    [-J|--jobname JOB_NAME (default=PRV)] [-q|--queue QUEUE_NAME (default=debug)]"
echo "    [-m|--mem MEMORY (only valid on P9, default=20Gb)]"
echo "    [--constraint CONSTRAINT (default=medmem)]"
}

getopt --test 2> /dev/null
if [[ $? -ne 4 ]]; then
    echo "GNU's enhanced getopt is required to run this script"
    echo "You can usually find this in the util-linux package"
    echo "On MacOS/OS X see homebrew's package: http://brewformulas.org/Gnu-getopt"
    echo "For anyone else, build from source: http://frodo.looijaard.name/project/getopt"
    exit 1
fi

# bash strict mode: see http://redsymbol.net/articles/unofficial-bash-strict-mode/ for info
set -eo pipefail
IFS=$'\n\t'

# An option followed by a single colon ':' means that it *needs* an argument.
# An option followed by double colons '::' means that its argument is optional.
# See `man getopt'.
SHORT=uc:t:J:q:m:V
LONG=usage,cores:,time:,jobname:,queue:,mem:,constraint:,help,version,debug,clean,interactive,conf:,config:,config_dir:,section:,ghost_version:,cartopy_data_dir:,ghost_root:,nonghost_root:,exp_root:,generate_file_tree,file_tree,gft,offline,interactive,interpolation,interp,interpolate,network:,species:,resolution:,start_date:,end_date:,experiments:,temporal_colocation:,spatial_colocation:,filter_species:,lower_bound:,upper_bound:,report_type:,report_summary:,report_stations:,report_title:,report_filename:,map_extent:,active_dashboard_plots:,plot_characteristics_filename:

# parse arguments
PARSED=$(getopt --options ${SHORT} \
                --longoptions ${LONG} \
                --name "$0" \
                -- "$@")         # pass all the args to this script to getopt
# exit if getopt has complained about wrong arguments to stdout
if [[ $? -ne 0 ]]; then
    exit 2
fi

# set qos depending on the mode and machine
if [[ $PARSED =~ "--interp" || $PARSED =~ "--interpolation" || $PARSED =~ "--interpolate" ]]; then
    if [ "${BSC_MACHINE}" == "mn5" ]; then
        queue="gp_bsces"
    else
        queue="bsc_es"
    fi
else
    if [ "${BSC_MACHINE}" == "mn5" ]; then
        queue="gp_debug"
    else
        queue="debug"
    fi 
fi

# reset SLURM_EXPORT_ENV so that things like srun & sbatch work out of the box
export SLURM_EXPORT_ENV=ALL

# workaround to stop driver conflict issue 
#export QT_QPA_PLATFORM_PLUGIN_PATH=/gpfs/home/bsc/${USER}/.conda/envs/providentia-env/lib/python3.9/site-packages/PyQt5/Qt5/plugins

# get OS
#Mac OS X platform        
if [ "$(uname)" == "Darwin" ]; then
    OS="Mac"        
#GNU/Linux platform
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    OS="Linux"
# Windows platform
elif [ "$(expr substr $(uname -s) 1 10)" == "Windows" ] || [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ] || [ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]; then
    OS="Windows"
else
    echo "The OS cannot be detected. Exiting."
    exit 1
fi

# update key arguments for job submission
OTHEROPTS=""
while [ $# -gt 0 ]; do
  # parse equals sign in arguments
  OPT="$1"
  if [[ $OPT == *"="* ]]; then
      OPTNAME=${OPT%=*}
      OPTARG=${OPT#*=}
  else
      OPTNAME=$OPT 
      OPTARG=""
  fi
  case $OPTNAME in
        -u|--usage) shift
                    usage 
                    exit 0
                    ;;
        -c|--cores) shift
                    cores=$OPTARG;;
        -t|--time) shift
                    cores=$OPTARG;;
        -J|--jobname) shift
                    jobname=$OPTARG;;
        -q|--queue) shift
                    queue=$OPTARG;;
        -m|--mem) shift
                  mem=$OPTARG;;
        --constraint) shift 
                      constraint=$OPTARG;;            
        -*) shift
            OTHEROPTS+="$OPT ";;
        * ) echo "ALL OPTIONS MUST BE PREFIXED WITH '-' or '--', AND ARGUMENTS MUST BE PREFIXED WITH '=', e.g. '--cores=10'" 
            exit 2
  esac
done

account_option="--account=bsc32"
queue_option="--qos=$queue"
memory_option="--mem=$mem"
constraint_option="--constraint=$constraint"
load_command="source load_modules.sh"
python_command="python3 -u -Wi -c 'from providentia import main;main.main()' $OTHEROPTS"
interactive_alloc_command="sbatch -t $time -c $cores -J $jobname"
script_dir=$(dirname $(realpath $(dirname $0)))

# avoid x11 forwarding when creating offline reports or doing interpolations
if [[ $PARSED =~ "--offline" || $PARSED =~ "--interp" || $PARSED =~ "--interpolation" || $PARSED =~ "--interpolate" ]]; then
    salloc_command="salloc -t $time -c $cores -J $jobname"
else
    salloc_command="salloc -t $time -c $cores -J $jobname --x11"
fi

# if using debug mode then just reserve allocation, do not execute providentia
if [[ $PARSED =~ "--debug" ]]; then
    debug=true
else
    debug=false
fi

# if using interactive mode then 
if [[ $PARSED =~ "--interactive" ]]; then
    interactive=true
else
    interactive=false
fi

# if using interpolation mode then
# if it is not accompanied by config throw an error
if [[ $PARSED =~ "--interp" || $PARSED =~ "--interpolation" || $PARSED =~ "--interpolate" ]]; then
    interpolation=true
else
    interpolation=false
fi

# determine if need to just execute python if have allocation made (i.e. are in debug mode)
VALID_HOSTS="p9login1 login0 login1 login2 login3 login4 glogin1 glogin2 glogin3 glogin4"
HOST=`hostname`
if [[ " $VALID_HOSTS " =~ .*\ $HOST\ .* ]]; then
    debugexec=false
else
    debugexec=true
fi

# use clean mode and exit
if [[ $PARSED =~ "--clean" ]]; then
    if [ "${BSC_MACHINE}" == "mn5" ]; then
        eval "sbatch ${account_option} ${queue_option} clean_output.sh"
    else
        sbatch clean_output.sh
    fi
    exit 0
fi

# load modules from conda environment
# EXPORTPATH="/gpfs/home/bsc32/bsc32781/.conda/envs/myenv/lib/python3.9/site-packages"
# export PYTHONPATH=${EXPORTPATH}:${PYTHONPATH}

# get IP (different method for each OS)
if [ "${OS}" == "Mac" ]; then
    ip=${LOCAL_IP:-`ipconfig getifaddr en0`}
elif [ "${OS}" == "Linux" ]; then
    ip=$(hostname --ip-address)
elif [ "${OS}" == "Windows" ]; then
    ip=${LOCAL_IP:-`ipconfig.exe | grep -im1 'IPv4 Address' | cut -d ':' -f2`}
fi

# execution
# Marenostrum5
if [ "${BSC_MACHINE}" == "mn5" ]; then

    echo "INFO: Running on MN5..."

    # load modules from conda environment
    active_env=false
    module load anaconda
    eval "$(conda shell.bash hook)"
    if { conda env list | grep 'providentia-env'; } >/dev/null 2>&1; then 
        echo "Activating environment..."
        conda activate providentia-env
        active_env=true
    else
        # create environment if it does not exist if we are in glogin4 (with internet)
        echo "Environment providentia-env does not exist."; 
        node=$(hostname -s)
        if [ "${node}" == "glogin4" ]; then
            echo "Creating environment..."
            conda create -n providentia-env -y python=3.9.16
            conda activate providentia-env
            conda install -c conda-forge cartopy -y
            conda install -c conda-forge jupyterlab -y
            pip install -r requirements.txt
            active_env=true
        else
            echo "Please connect to MN5 using glogin4 to create the environment automatically."
        fi
    fi

    if $active_env; then
        if $interactive; then
            echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
            echo "Starting interactive jupyter session."
            echo "Check 'interactive.out' for information on how to connect to session."
            
            if [[ "${constraint}" == "lowmem" ||  "${constraint}" == "medmem" ]]; then
                eval "${interactive_alloc_command} ${account_option} ${queue_option} interactive.sh"
            else
                eval "${interactive_alloc_command} ${account_option} ${constraint_option} ${queue_option} interactive.sh"
            fi

        elif $debug; then
            echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
            echo "Entering debug mode"
            if [[ "${constraint}" == "lowmem" ||  "${constraint}" == "medmem" ]]; then
                eval "${salloc_command} ${account_option} ${queue_option}"
            else
                eval "${salloc_command} ${account_option} ${constraint_option} ${queue_option}"
            fi
        
        elif $interpolation; then
            echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, mem: ${mem}"
            outputString=$(eval "srun ${account_option} ${queue_option} ${python_command}")
            jobid=$(eval "sbatch ${account_option} ${queue_option} ${script_dir}/providentia/interpolation/experiment_interpolation_submit_mn5.sh $outputString | awk '{print \$4}'")
            echo "Check submission info in 'providentia/interpolation/management_logs/$jobid.out'"

        else
            if $debugexec; then
                eval "srun ${account_option} ${python_command}"
            else
                echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
                if [[ "${constraint}" == "lowmem" ||  "${constraint}" == "medmem" ]]; then
                    eval "${salloc_command} ${account_option} ${queue_option} srun ${python_command}"
                else
                    eval "${salloc_command} ${account_option} ${constraint_option} ${queue_option} srun ${python_command}"
                fi
            fi
        fi
    fi

# Nord3v2
elif [ "${BSC_MACHINE}" == "nord3v2" ] || [ "${BSC_MACHINE}" = "amd" ]; then
    echo "INFO: Running on ${BSC_MACHINE}..."
    if $interactive; then
        echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
        echo "Starting interactive jupyter session."
        echo "Check 'interactive.out' for information on how to connect to session."
        eval "${load_command}"
        if [[ "${constraint}" == "lowmem" ]]; then
            eval "${interactive_alloc_command} ${queue_option} interactive.sh"
        else
            eval "${interactive_alloc_command} ${constraint_option} ${queue_option} interactive.sh"
        fi

    elif $debug; then
        echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
        echo "Entering debug mode"
        eval "${load_command}"
        if [[ "${constraint}" == "lowmem" ]]; then
            eval "${salloc_command} ${queue_option}"
        else
            eval "${salloc_command} ${constraint_option} ${queue_option}"
        fi
    
    elif $interpolation; then
        echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, mem: ${mem}"
        eval "${load_command}"
        outputString=$(eval "srun ${python_command}")
        jobid=$(eval "sbatch ${script_dir}/providentia/interpolation/experiment_interpolation_submit.sh $outputString | awk '{print \$4}'")
        echo "Check submission info in 'providentia/interpolation/management_logs/$jobid.out'"

    else
        if $debugexec; then
            eval "srun ${python_command}"
        else
            echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
            eval "${load_command}"
            if [[ "${constraint}" == "lowmem" ]]; then
                eval "${salloc_command} ${queue_option} srun ${python_command}"
            else
                eval "${salloc_command} ${constraint_option} ${queue_option} srun ${python_command}"
            fi
        fi
    fi

# Hub
elif [ "${ip}" == "84.88.185.48" ]; then
    echo "INFO: Running on the hub..."
    eval "${load_command}"
    if $interactive; then
        echo "Starting interactive jupyter session."
        export PYTHONPATH=$(pwd):${PYTHONPATH}
        jupyter-lab
    else
        eval "${python_command}"
    fi

# Local machines (Workstations, dust02 machine and personal laptops)
else
    echo "INFO: Running on a local machine..."
    
    # load modules from conda environment
    active_env=false
    eval "$(conda shell.bash hook)"
    if { conda env list | grep 'providentia-env'; } >/dev/null 2>&1; then 
        echo "Activating environment..."
        conda activate providentia-env
        active_env=true
    else
        # create environment if it does not exist
        echo "Environment providentia-env does not exist."; 
        echo "Creating environment..."
        conda create -n providentia-env -y python=3.9.16
        conda activate providentia-env
        conda install -c conda-forge cartopy -y
        conda install -c conda-forge jupyterlab -y
        pip install -r requirements.txt
        active_env=true
    fi

    if $interactive; then
        echo "Starting interactive jupyter session."
        export PYTHONPATH=$(pwd):${PYTHONPATH}
        jupyter-lab --port 8888 --ip 0.0.0.0 --allow-root
    else
        eval "${python_command}"
    fi
fi
