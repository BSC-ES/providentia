#!/usr/bin/env bash

# init
cores=12
jobname="PRV"
queue="debug"
mem="20Gb"
constraint="medmem"

function usage () {
echo "Usage: providentia [-u|--usage] [-c|--cores NUM_CORES (default=16)]"
echo "    [-J|--jobname JOB_NAME (default=PRV)] [-q|--queue QUEUE_NAME (default=debug)]"
echo "    [-m|--mem MEMORY (only valid on P9, default=20Gb)]"
echo "    [--constraint CONSTRAINT (default=medmem)]"
}

getopt --test 2> /dev/null
if [[ $? -ne 4 ]]; then
    echo "GNU's enhanced getopt is required to run this script"
    echo "You can usually find this in the util-linux package"
    echo "On MacOS/OS X see homebrew's package: http://brewformulas.org/Gnu-getopt"
    echo "For anyone else, build from source: http://frodo.looijaard.name/project/getopt"
    exit 1
fi

# bash strict mode: see http://redsymbol.net/articles/unofficial-bash-strict-mode/ for info
set -eo pipefail
IFS=$'\n\t'

# An option followed by a single colon ':' means that it *needs* an argument.
# An option followed by double colons '::' means that its argument is optional.
# See `man getopt'.
SHORT=uc:J:q:m:V
LONG=usage,cores:,jobname:,queue:,mem:,constraint:,help,version,config:,config_dir:,section:,ghost_version:,cartopy_data_dir:,ghost_root:,nonghost_root:,exp_root:,offline:,network:,species:,resolution:,start_date:,end_date:,experiments:,temporal_colocation:,spatial_colocation:,filter_species:,report_type:,report_summary:,report_stations:,report_title:,report_filename:,map_extent:,active_dashboard_plots:,plot_characteristics_filename:

# parse arguments
PARSED=$(getopt --options ${SHORT} \
                --longoptions ${LONG} \
                --name "$0" \
                -- "$@")         # pass all the args to this script to getopt

# exit if getopt has complained about wrong arguments to stdout
if [[ $? -ne 0 ]]; then
    exit 2
fi

# update key arguments for job submission
OTHEROPTS=""
while [ $# -gt 0 ]; do
  #parse equals sign in arguments
  OPT="$1"
  if [[ $OPT == *"="* ]]; then
      OPTNAME=${OPT%=*}
      OPTARG=${OPT#*=}
  else
      OPTNAME=$OPT 
      OPTARG=""
  fi
  case $OPTNAME in
        -u|--usage) shift
                    usage 
                    exit 0
                    ;;
        -c|--cores) shift
                    cores=$OPTARG;;
        -J|--jobname) shift
                    jobname=$OPTARG;;
        -q|--queue) shift
                    queue=$OPTARG;;
        -m|--mem) shift
                  mem=$OPTARG;;
        --constraint) shift 
                      constraint=$OPTARG;;
        -*) shift
            OTHEROPTS+="$OPT ";;
        * ) echo "ALL OPTIONS MUST BE PREFIXED WITH '-' or '--', AND ARGUMENTS MUST BE PREFIXED WITH '=', e.g. '--cores=10'" 
            exit 2
  esac
done

queue_option="--qos=$queue"
memory_option="--mem=$mem"
constraint_option="--constraint=$constraint"
load_command="source load_modules.sh"
salloc_command="salloc -t 02:00:00 -c $cores -J $jobname --x11"
python_command="python3 -u -Wi -c 'from providentia import providentia;providentia.main()' $OTHEROPTS"

# set QT scale to avoid magnifying issues
if [ "${BSC_MACHINE}" != "nord3" ]; then
    export QT_AUTO_SCREEN_SCALE_FACTOR=0
fi

# load modules
eval "${load_command}"

# execution
# CTE POWER 9
if [ "${BSC_MACHINE}" == "power" ]; then
    # get allocation of resources on CTE-POWER
    echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, mem: ${mem}"
    eval "${salloc_command} ${queue_option} ${memory_option} srun ${python_command}"
# Marenostrum4
elif [ "${BSC_MACHINE}" == "mn4" ]; then
    # get allocation of resources on MN4
    echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
    if [[ "${constraint}" == "lowmem" ||  "${constraint}" == "medmem" ]]; then
        eval "${salloc_command} ${queue_option} srun ${python_command}"
    else
        eval "${salloc_command} ${constraint_option} ${queue_option} srun ${python_command}"
    fi
# Nord3v2
elif [ "${BSC_MACHINE}" == "nord3v2" ]; then
    # get allocation of resources on Nord3v2
    echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
    if [[ "${constraint}" == "lowmem" ]]; then
        eval "${salloc_command} ${queue_option} srun ${python_command}"
    else
        eval "${salloc_command} ${constraint_option} ${queue_option} srun ${python_command}"
    fi
# Workstations
else
    echo "Warning: running in your workstation/laptop may make Providentia slower ..."
    eval "${python_command}"
fi