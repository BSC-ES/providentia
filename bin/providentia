#!/usr/bin/env bash
# init
cores=12
jobname="PRV"
queue="debug"
mem="20Gb"
constraint="medmem"

function usage () {
echo "Usage: providentia [-u|--usage] [-c|--cores NUM_CORES (default=16)]"
echo "    [-J|--jobname JOB_NAME (default=PRV)] [-q|--queue QUEUE_NAME (default=debug)]"
echo "    [-m|--mem MEMORY (only valid on P9, default=20Gb)]"
echo "    [--constraint CONSTRAINT (default=medmem)]"
}

getopt --test 2> /dev/null
if [[ $? -ne 4 ]]; then
    echo "GNU's enhanced getopt is required to run this script"
    echo "You can usually find this in the util-linux package"
    echo "On MacOS/OS X see homebrew's package: http://brewformulas.org/Gnu-getopt"
    echo "For anyone else, build from source: http://frodo.looijaard.name/project/getopt"
    exit 1
fi

# bash strict mode: see http://redsymbol.net/articles/unofficial-bash-strict-mode/ for info
set -eo pipefail
IFS=$'\n\t'

# An option followed by a single colon ':' means that it *needs* an argument.
# An option followed by double colons '::' means that its argument is optional.
# See `man getopt'.
SHORT=uc:J:q:m:V
LONG=usage,cores:,jobname:,queue:,mem:,constraint:,help,version,debug,conf:,config:,config_dir:,section:,ghost_version:,cartopy_data_dir:,ghost_root:,nonghost_root:,exp_root:,offline,interactive,network:,species:,resolution:,start_date:,end_date:,experiments:,temporal_colocation:,spatial_colocation:,filter_species:,lower_bound:,upper_bound:,report_type:,report_summary:,report_stations:,report_title:,report_filename:,map_extent:,active_dashboard_plots:,plot_characteristics_filename:

# parse arguments
PARSED=$(getopt --options ${SHORT} \
                --longoptions ${LONG} \
                --name "$0" \
                -- "$@")         # pass all the args to this script to getopt
# exit if getopt has complained about wrong arguments to stdout
if [[ $? -ne 0 ]]; then
    exit 2
fi

# reset SLURM_EXPORT_ENV so that things like srun & sbatch work out of the box
    export SLURM_EXPORT_ENV=ALL

# update key arguments for job submission
OTHEROPTS=""
while [ $# -gt 0 ]; do
  # parse equals sign in arguments
  OPT="$1"
  if [[ $OPT == *"="* ]]; then
      OPTNAME=${OPT%=*}
      OPTARG=${OPT#*=}
  else
      OPTNAME=$OPT 
      OPTARG=""
  fi
  case $OPTNAME in
        -u|--usage) shift
                    usage 
                    exit 0
                    ;;
        -c|--cores) shift
                    cores=$OPTARG;;
        -J|--jobname) shift
                    jobname=$OPTARG;;
        -q|--queue) shift
                    queue=$OPTARG;;
        -m|--mem) shift
                  mem=$OPTARG;;
        --constraint) shift 
                      constraint=$OPTARG;;            
        -*) shift
            OTHEROPTS+="$OPT ";;
        * ) echo "ALL OPTIONS MUST BE PREFIXED WITH '-' or '--', AND ARGUMENTS MUST BE PREFIXED WITH '=', e.g. '--cores=10'" 
            exit 2
  esac
done

queue_option="--qos=$queue"
memory_option="--mem=$mem"
constraint_option="--constraint=$constraint"
load_command="source load_modules.sh"
python_command="python3 -u -Wi -c 'from providentia import providentia;providentia.main()' $OTHEROPTS"

# avoid x11 forwarding when creating offline reports
if [[ $PARSED =~ "--offline" ]]; then
    salloc_command="salloc -t 02:00:00 -c $cores -J $jobname"
else
    salloc_command="salloc -t 02:00:00 -c $cores -J $jobname --x11"
fi

# if using debug mode then just reserve allocation, do not execute providentia
if [[ $PARSED =~ "--debug" ]]; then
    debug=true
else
    debug=false
fi

# determine if need to just excecute python if have allocation made (i.e. are in debug mode)
VALID_HOSTS="p9login1 login0 login1 login2 login3 login4"
HOST=`hostname`
if [[ " $VALID_HOSTS " =~ .*\ $HOST\ .* ]]; then
    debugexec=false
else
    debugexec=true
fi

# load modules from conda environment
# EXPORTPATH="/gpfs/home/bsc32/bsc32781/.conda/envs/myenv/lib/python3.9/site-packages"
# export PYTHONPATH=${EXPORTPATH}:${PYTHONPATH}

# execution
# CTE POWER 9
if [ "${BSC_MACHINE}" == "power" ]; then
    
    if [$debug]; then
        echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, mem: ${mem}"
        echo "Entering debug mode"
        eval "${load_command}"
        eval "${salloc_command} ${queue_option} ${memory_option}"
    else
        if [$debugexec]; then
            eval "srun ${python_command}"
        else
            echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, mem: ${mem}"
            eval "${load_command}"
            eval "${salloc_command} ${queue_option} ${memory_option} srun ${python_command}"
        fi
    fi
    
# Marenostrum4
elif [ "${BSC_MACHINE}" == "mn4" ]; then
    # avoid magnified graphics
    eval export QT_AUTO_SCREEN_SCALE_FACTOR=0

    if $debug; then
        echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
        echo "Entering debug mode"
        eval "${load_command}"
        if [[ "${constraint}" == "lowmem" ||  "${constraint}" == "medmem" ]]; then
            eval "${salloc_command} ${queue_option}"
        else
            eval "${salloc_command} ${constraint_option} ${queue_option}"
        fi
    else
        if $debugexec; then
            eval "srun ${python_command}"
        else
            echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
            eval "${load_command}"
            if [[ "${constraint}" == "lowmem" ||  "${constraint}" == "medmem" ]]; then
                eval "${salloc_command} ${queue_option} srun ${python_command}"
            else
                eval "${salloc_command} ${constraint_option} ${queue_option} srun ${python_command}"
            fi
        fi
    fi

# Nord3v2
elif [ "${BSC_MACHINE}" == "nord3v2" ]; then
    
    if $debug; then
        echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
        echo "Entering debug mode"
        eval "${load_command}"
        if [[ "${constraint}" == "lowmem" ]]; then
            eval "${salloc_command} ${queue_option}"
        else
            eval "${salloc_command} ${constraint_option} ${queue_option}"
        fi
    else
        if $debugexec; then
            eval "srun ${python_command}"
        else
            echo "OPTIONS: cores: ${cores}, jobname: ${jobname}, queue: ${queue}, constraint: ${constraint}"
            eval "${load_command}"
            if [[ "${constraint}" == "lowmem" ]]; then
                eval "${salloc_command} ${queue_option} srun ${python_command}"
            else
                eval "${salloc_command} ${constraint_option} ${queue_option} srun ${python_command}"
            fi
        fi
    fi
# Workstations
else
    echo "Warning: running in your workstation/laptop may make Providentia slower ..."
    eval "${python_command}"
fi
